// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using orchid_backend_net.Infrastructure.Persistence;

#nullable disable

namespace orchid_backend_net.Infrastructure.Migrations
{
    [DbContext(typeof(OrchidDbContext))]
    [Migration("20250719093022_Update_Task_Details")]
    partial class Update_Task_Details
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReferentsReportAttributes", b =>
                {
                    b.Property<string>("ReferentsID")
                        .HasColumnType("text");

                    b.Property<string>("ReportAttributesID")
                        .HasColumnType("text");

                    b.HasKey("ReferentsID", "ReportAttributesID");

                    b.HasIndex("ReportAttributesID");

                    b.ToTable("ReferentsReportAttributes");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Characteristics", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("SeedlingAttributeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeedlingID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("SeedlingAttributeID");

                    b.HasIndex("SeedlingID");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Diseases", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InfectedRate")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ElementInStage", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ElementID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StageID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("ElementID");

                    b.HasIndex("StageID");

                    b.ToTable("ElementInStage");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Elements", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ExperimentLogs", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Create_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Create_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Delete_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Delete_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InfectedRateInReality")
                        .HasColumnType("numeric");

                    b.Property<string>("MethodID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TissueCultureBatchID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Update_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("MethodID");

                    b.HasIndex("TissueCultureBatchID");

                    b.ToTable("ExperimentLogs");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Hybridizations", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ExperimentLogID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("ExperimentLogID");

                    b.HasIndex("ParentID");

                    b.ToTable("Hybridization");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Imgs", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ReportID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ReportID");

                    b.ToTable("Imgs");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.InfectedSamples", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("DiseaseID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InfectedLevel")
                        .HasColumnType("integer");

                    b.Property<string>("SampleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TreatmentStatus")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DiseaseID");

                    b.HasIndex("SampleID");

                    b.ToTable("InfectedSamples");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.LabRooms", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.ToTable("LabRooms");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Linkeds", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ExperimentLogID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProcessStatus")
                        .HasColumnType("integer");

                    b.Property<string>("SampleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StageID")
                        .HasColumnType("text");

                    b.Property<string>("TaskID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ExperimentLogID");

                    b.HasIndex("SampleID");

                    b.HasIndex("TaskID");

                    b.ToTable("Linkeds");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Methods", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Referents", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StageID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ValueFrom")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValueTo")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("StageID");

                    b.ToTable("Referents");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ReportAttributes", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ReportID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ReportID");

                    b.ToTable("ReportAttributes");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Reports", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SampleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TechnicianID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SampleID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Samples", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.SeedlingAttributes", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.ToTable("SeedlingAttributes");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Seedlings", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Create_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Create_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Delete_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Delete_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parent1")
                        .HasColumnType("text");

                    b.Property<string>("Parent2")
                        .HasColumnType("text");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Update_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.ToTable("Seedlings");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Stages", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<int>("DateOfProcessing")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MethodID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("MethodID");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskAttributes", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TaskID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskAttributes");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskTemplateDetails", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Element")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ExpectedValue")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TaskTemplateID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("TaskTemplateID");

                    b.ToTable("TaskTemplateDetails");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskTemplates", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StageID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("StageID");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Tasks", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("Create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Create_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Create_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Delete_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Delete_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("End_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Researcher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Start_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Update_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TasksAssign", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TaskID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechnicianID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.HasIndex("TechnicianID");

                    b.ToTable("TaskAssigns");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TissueCultureBatches", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LabRoomID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("LabRoomID");

                    b.ToTable("TissueCultureBatches");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Users", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Create_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Create_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Delete_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Delete_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Update_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReferentsReportAttributes", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Referents", null)
                        .WithMany()
                        .HasForeignKey("ReferentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.ReportAttributes", null)
                        .WithMany()
                        .HasForeignKey("ReportAttributesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Characteristics", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.SeedlingAttributes", "SeedlingAttribute")
                        .WithMany()
                        .HasForeignKey("SeedlingAttributeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Seedlings", "Seedling")
                        .WithMany("Characteristics")
                        .HasForeignKey("SeedlingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seedling");

                    b.Navigation("SeedlingAttribute");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ElementInStage", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Elements", "Element")
                        .WithMany("ElementInStages")
                        .HasForeignKey("ElementID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Stages", "Stage")
                        .WithMany("ElementInStages")
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ExperimentLogs", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Methods", "Method")
                        .WithMany("ExperimentLogs")
                        .HasForeignKey("MethodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.TissueCultureBatches", "TissueCultureBatch")
                        .WithMany("ExperimentLogs")
                        .HasForeignKey("TissueCultureBatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("TissueCultureBatch");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Hybridizations", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.ExperimentLogs", "ExperimentLog")
                        .WithMany("Hybridizations")
                        .HasForeignKey("ExperimentLogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Seedlings", "Parent")
                        .WithMany("Hybridizations")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExperimentLog");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Imgs", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Reports", "Report")
                        .WithMany()
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.InfectedSamples", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Diseases", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Samples", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Linkeds", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.ExperimentLogs", "ExperimentLog")
                        .WithMany("Linkeds")
                        .HasForeignKey("ExperimentLogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Samples", "Sample")
                        .WithMany("Linkeds")
                        .HasForeignKey("SampleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Tasks", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExperimentLog");

                    b.Navigation("Sample");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Referents", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Stages", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ReportAttributes", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Reports", "Report")
                        .WithMany()
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Reports", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Samples", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Stages", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Methods", "Method")
                        .WithMany("Stages")
                        .HasForeignKey("MethodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskAttributes", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Tasks", "Task")
                        .WithMany("Attributes")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskTemplateDetails", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.TaskTemplates", "TaskTemplate")
                        .WithMany("TemplateDetails")
                        .HasForeignKey("TaskTemplateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskTemplates", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Stages", "Stage")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TasksAssign", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Tasks", "Task")
                        .WithMany("Assigns")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orchid_backend_net.Domain.Entities.Users", "Technician")
                        .WithMany("Assigns")
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TissueCultureBatches", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.LabRooms", "LabRoom")
                        .WithMany()
                        .HasForeignKey("LabRoomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabRoom");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Users", b =>
                {
                    b.HasOne("orchid_backend_net.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Elements", b =>
                {
                    b.Navigation("ElementInStages");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.ExperimentLogs", b =>
                {
                    b.Navigation("Hybridizations");

                    b.Navigation("Linkeds");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Methods", b =>
                {
                    b.Navigation("ExperimentLogs");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Samples", b =>
                {
                    b.Navigation("Linkeds");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Seedlings", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("Hybridizations");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Stages", b =>
                {
                    b.Navigation("ElementInStages");

                    b.Navigation("TaskTemplates");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TaskTemplates", b =>
                {
                    b.Navigation("TemplateDetails");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Tasks", b =>
                {
                    b.Navigation("Assigns");

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.TissueCultureBatches", b =>
                {
                    b.Navigation("ExperimentLogs");
                });

            modelBuilder.Entity("orchid_backend_net.Domain.Entities.Users", b =>
                {
                    b.Navigation("Assigns");
                });
#pragma warning restore 612, 618
        }
    }
}
